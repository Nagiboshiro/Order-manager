@page "/"

@using OrderManager.Client.Extensions
@using OrderManager.Client.Pages.Orders.Components
@using OrderManager.Integration.Http
@using OrderManager.Integration.Http.Models.Orders

@inject ISnackbar Snackbar;
@inject IDialogService DialogService;
@inject IOrderManager ApiClient;

<PageTitle>Главная</PageTitle>

<MudBreadcrumbs Items="_breadcrumbItems"/>

<MudTable ServerData="@(new Func<TableState, Task<TableData<OrdersModel>>>(OnLoadItemsAsync))"
          Dense="true"
          Hover="true"
          Bordered="true"
          Striped="true"
          Virtualize="true"
          Loading="@_loading"
          LoadingProgressColor="Color.Info"
          @ref="_table">
    <ToolBarContent>
        <MudTooltip Delay="500" Text="Создать заказ">
            <MudIconButton
                Icon="@Icons.Material.Filled.Add"
                OnClick="CreateOrderAsync"/>
        </MudTooltip>
        <MudTooltip Delay="500" Text="Перезагрузить список">
            <MudIconButton
                Icon="@Icons.Material.Filled.Refresh"
                OnClick="ReloadItemsAsync"/>
        </MudTooltip>
        <MudSpacer/>
        <MudTextField
            T="string"
            Label="Номер"
            Placeholder="Номер"
            Adornment="Adornment.Start"
            AdornmentIcon="@Icons.Material.Filled.Title"
            @bind-Value="@Number"
            Style="max-width: 300px"
            Immediate="false"
            IconSize="Size.Medium"/>
        <MudDateRangePicker Style="max-width: 300px" Label="Фильтрация по дате" Editable="true" @bind-DateRange="_dateRange"/>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ReloadItemsAsync">Применить фильтры</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Ид</MudTh>
        <MudTh>Номер</MudTh>
        <MudTh>Дата</MudTh>
        <MudTh>Действия</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="OrderId">
            <MudLink Href="@($"orders/{context.OrderId}")">
                @context.OrderId.ToDisplay()
            </MudLink>
        </MudTd>
        <MudTd DataLabel="Number">@context.Number</MudTd>
        <MudTd DataLabel="Date">@context.Date.ToString("D")</MudTd>
        <MudTd>
            <MudTooltip Text="Редактировать">
                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                               Size="Size.Medium"
                               OnClick="@(() => ChangeOrderAsync(context.OrderId, context.ProviderId, context.Number, context.Date.DateTime))"/>
            </MudTooltip>
            <MudTooltip Text="Удалить">
                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                               Size="Size.Medium"
                               OnClick="@(() => DeleteOrderAsync(context.OrderId))"/>
            </MudTooltip>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    private DateRange _dateRange = new();
    
    private string? Number { get; set; }

    private readonly List<BreadcrumbItem> _breadcrumbItems = new()
    {
        new BreadcrumbItem("Заказы", "/", icon: Icons.Material.Filled.Home),
    };

    private MudTable<OrdersModel> _table = null!;

    private bool _loading = true;

    private async Task<TableData<OrdersModel>> OnLoadItemsAsync(TableState tableState)
    {
        _loading = true;

        try
        {
            var response = await ApiClient.GetOrdersAsync(new GetOrdersListRequest
            {
                Number = Number,
                StartDate = _dateRange.Start,
                EndDate = _dateRange.End
            });
            if (response.IsSuccessStatusCode)
            {
                var tableData = new TableData<OrdersModel>
                {
                    Items = response.Content!
                        .Select(o => new OrdersModel
                        {
                            OrderId = o.OrderId,
                            ProviderId = o.ProviderId,
                            Number = o.Number,
                            Date = o.Date,
                            CreatedOn = o.CreatedOn,
                            UpdatedOn = o.UpdatedOn
                        })
                };

                return tableData;
            }

            Snackbar.Add($"{response.StatusCode}: {response.Error?.Content ?? "Что то пошло не так"}", Severity.Error, options => { options.CloseAfterNavigation = true; });
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        finally
        {
            _loading = false;
        }

        return new TableData<OrdersModel>
        {
            TotalItems = 0,
            Items = Array.Empty<OrdersModel>()
        };
    }

    private Task ReloadItemsAsync() => _table.ReloadServerData();

    private async Task CreateOrderAsync()
    {
        var dialogReference = DialogService.Show<CreateOrderDialog>();
        var dialogResult = await dialogReference.Result;

        if (dialogResult.Canceled)
        {
            return;
        }

        await ReloadItemsAsync();
    }

    private async Task DeleteOrderAsync(Guid orderId)
    {
        var response = await ApiClient.DeleteOrderAsync(orderId);

        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add($"Заказ успешно удален", Severity.Success, options => { options.CloseAfterNavigation = true; });
        }
        else
        {
            Snackbar.Add($"{response.StatusCode}: {response.Error?.Content ?? "Что то пошло не так"}", Severity.Error, options => { options.CloseAfterNavigation = true; });
        }

        await ReloadItemsAsync();
    }

    private async Task ChangeOrderAsync(Guid orderId, Guid providerId, string number, DateTime date)
    {
        var dialogReference = DialogService.Show<ChangeOrderDialog>($"Изменить параметры заказа {number}", new DialogParameters
        {
            { "OrderId", orderId },
            { "ProviderId", providerId },
            { "Number", number },
            { "Date", date },
        });
        var dialogResult = await dialogReference.Result;

        if (dialogResult.Canceled)
        {
            return;
        }

        await ReloadItemsAsync();
    }

    private sealed class OrdersModel
    {
        public Guid OrderId { get; init; }
        public Guid ProviderId { get; init; }
        public string Number { get; init; } = null!;
        public DateTimeOffset Date { get; init; }
        public DateTimeOffset CreatedOn { get; init; }
        public DateTimeOffset UpdatedOn { get; init; }
    }

}